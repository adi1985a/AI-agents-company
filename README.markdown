# üè¢ü§ñ AI OfficeSim: Asynchronous Workplace Simulator üìà
_A Python-based AI-driven tool simulating a modern office environment with advanced task management, skill-based agent assignment, asynchronous communication, and a powerful real-time GUI monitor._

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Python](https://img.shields.io/badge/Python-3.8%2B-3776AB.svg?logo=python&logoColor=white)](https://www.python.org/)
[![AsyncIO](https://img.shields.io/badge/AsyncIO-Asynchronous-4B8BBE.svg)]()
[![Tkinter](https://img.shields.io/badge/GUI-Tkinter-orange.svg)]()

## üìã Table of Contents
1.  [Overview](#-overview)
2.  [Key Features](#-key-features)
3.  [Screenshots (Conceptual)](#-screenshots-conceptual)
4.  [System Requirements](#-system-requirements)
5.  [Core GUI Module (`gui.py`)](#-core-gui-module-guipy)
6.  [Installation and Setup](#Ô∏è-installation-and-setup)
7.  [Usage Guide](#Ô∏è-usage-guide)
8.  [File Structure](#-file-structure)
9.  [Technical Notes](#-technical-notes)
10. [Contributing](#-contributing)
11. [License](#-license)
12. [Contact](#-contact)

## üìÑ Overview

**AI OfficeSim: Asynchronous Workplace Simulator** is a Python application that models and simulates the dynamics of a modern digital office. It features advanced task management, a diverse team of AI-powered agents with unique roles and skills, asynchronous communication, and a comprehensive, real-time GUI for monitoring and interaction. The system is ideal for exploring collaborative workflows, AI delegation, and digital teamwork.

<br> 
<p align="center">
  <img src="screenshots/1.gif" width="90%">
</p>
<br>


## ‚ú® Key Features

*   üìã **Advanced Task Management**:
    *   Create, assign, and track tasks with full lifecycle support.
    *   Task statuses: `Pending`, `In Progress`, `Blocked`, `Completed`, `Failed`.
    *   Task priorities: `Low`, `Medium`, `High`, `Critical`.
    *   Task submission and management directly from the GUI.
*   ü§ñ **Diverse AI Agents**:
    *   Simulates a full digital team: CEO/Integrator, Web Developer, UX/UI Designer, Copywriter, AI Graphic Designer, Data Analyst, Project Manager, Marketing Strategist, QA/Feedback, Mobile Tester, AI Chatbot, Client Advisor, Hosting/DevOps.
    *   Each agent has a unique role, skills, personality traits, and preferred tools.
    *   Agents autonomously process, delegate, and communicate about tasks.
    *   Agents can use local LLMs (Ollama/Qwen3), OpenAI, or built-in heuristics for AI responses.
*   üó£Ô∏è **Asynchronous Communication Bus**:
    *   Realistic, non-blocking message passing between agents for coordination, information sharing, and delegation.
    *   All communication is logged and visible in the GUI.
*   üñ•Ô∏è **Modern Real-Time GUI (Tkinter + Matplotlib)**:
    *   Large, resizable main window with:
        *   **Task Submission**: Add new tasks with title, description, and priority.
        *   **Agent Information**: Browse all agents, their roles, and skills.
        *   **Task Status**: Live log of all task status changes.
        *   **Task List**: Overview of all tasks, statuses, priorities, and assignees.
        *   **Results & Code**: Multi-tab notebook for:
            *   Results (task outputs)
            *   HTML, CSS, JavaScript code (generated by agents)
            *   Reports (agent details, project summaries, etc.)
        *   **Conference Room**: Real-time, scrollable log of agent-to-agent communication.
        *   **Agent Bar**: Scrollable row of agent buttons for quick access to agent details.
        *   **Charts**: Visualize agent work time and task status distribution (Matplotlib).
        *   **State Management**: Save/load simulation state from the GUI.
        *   **All popups replaced by in-GUI tabs for seamless workflow.**
*   üß† **Skill-Based Task Assignment**:
    *   Tasks are automatically assigned to the most suitable agent(s) based on required and available skills.
*   üìä **Analytics and Reporting**:
    *   Built-in charts for agent activity and task status.
    *   Detailed agent and project reports available in the GUI.
*   üí¨ **Full English Interface**:
    *   All labels, logs, and messages are in English.

## üñºÔ∏è Screenshots (Conceptual)

_The GUI features a modern, multi-pane layout with tabs for results, code, and reports, a live conference room, and interactive charts._

<p align="center">
  <img src="screenshots\1.jpg" width="300"/>
  <img src="screenshots\2.jpg" width="300"/>
  <img src="screenshots\3.jpg" width="300"/>
  <img src="screenshots\4.jpg" width="300"/>
  <img src="screenshots\5.jpg" width="300"/>
  <img src="screenshots\6.jpg" width="300"/>
</p>


## ‚öôÔ∏è System Requirements

*   **Python Version**: Python 3.8 or higher
*   **Required Libraries**:
    *   `tkinter` (standard with Python)
    *   `matplotlib`
    *   `requests` (for Ollama integration, optional)
    *   `openai` (for OpenAI integration, optional)
    *   `llama-cpp-python` (for local Llama models, optional)
*   **Recommended**: Modern OS, 1920x1080+ screen for best GUI experience

Install dependencies:
```bash
pip install matplotlib
# Optional:
pip install requests openai llama-cpp-python
```

## üß© Core GUI Module (`gui.py`)

*   The GUI is implemented in `gui.py` using Tkinter and Matplotlib.
*   All windows, tabs, and logs are integrated into a single, resizable main window.
*   No popups: all agent details, code, and results are shown in the Results & Code notebook.
*   The GUI is launched via the `run_gui()` function from `main.py`.

## üõ†Ô∏è Installation and Setup

1.  **Clone the Repository**:
    ```bash
    git clone <repository-url>
    cd <repository-directory>
    ```
2.  **Install Dependencies** (see above)
3.  **Run the Application**:
    ```bash
    python main.py
    ```

## üí° Usage Guide

1.  Launch the application with `python main.py`.
2.  Use the GUI to:
    *   Add new tasks (title, description, priority)
    *   Browse and inspect all agents and their skills
    *   Track task status and agent activity in real time
    *   View all agent communication in the Conference Room
    *   See all results, code, and reports in the Results & Code notebook
    *   Visualize agent work time and task status with charts
    *   Save/load the simulation state at any time
3.  All agent actions, communications, and results are visible in the main window.
4.  The simulation runs until stopped or all tasks are completed.

## üóÇÔ∏è File Structure

*   `main.py`: Core simulation logic, agent/task management, communication bus, GUI launch
*   `agents.py`: Agent classes, roles, skills, AI logic (Ollama/OpenAI/heuristics)
*   `tasks.py`: Task and status definitions
*   `gui.py`: Modern Tkinter GUI with all-in-one window, charts, logs, and tabs
*   `storage.py`: State save/load logic
*   `requirements.txt`: Dependencies
*   `README.markdown`: This documentation

## üìù Technical Notes

*   **All-in-one GUI**: No popups, all information is in the main window for maximum usability.
*   **Agent AI**: Agents can use local LLMs (Ollama/Qwen3), OpenAI, or built-in logic for task processing and communication.
*   **Extensible**: Add new agent types, skills, or task types by editing `agents.py` and `tasks.py`.
*   **Charts**: Real-time Matplotlib charts for agent work time and task status.
*   **In-Memory Data**: All data is in memory; use save/load for persistence.
*   **Concurrency**: Uses `asyncio` for agent logic and communication.

## ü§ù Contributing

Contributions are welcome! Ideas for new agent types, smarter AI, new GUI features, or integrations are encouraged.

1.  Fork the repository.
2.  Create a new branch for your feature (`git checkout -b feature/YourFeature`).
3.  Make your changes and commit (`git commit -m 'Feature: ...'`).
4.  Push and open a Pull Request.

Please follow PEP 8, use type hints, and comment your code.

## üìÉ License

This project is licensed under the **MIT License**. See the LICENSE file for details.

## üìß Contact

Project concept by **Adrian Lesniak**.
For questions, feedback, or issues, please open an issue on GitHub or contact the repository owner.

---
üöÄ _Simulating the future of work, one asynchronous task at a time!_
